{"version":3,"sources":["components/logo/logo.png","api/api.ts","components/loader/loader.tsx","service/utility.ts","components/ticket/ticket.tsx","components/logo/logo.tsx","components/stopfiltres/stopfiltres.tsx","components/tabs/tabs.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","aviasalesApi","Loader","className","getFormattedDate","departureDate","duration","temp","Date","arrivedDate","getTime","getHours","getMinutes","getTimeOfFlight","value","hour","Math","trunc","minute","Ticket","props","undefined","apiState","length","incomingArray","typeOfSort","tempArray","resultArray","Array","i","push","price","sort","a","b","indexOf","segments","sortTicketsByTabs","tabsSort","slice","map","item","index","key","toString","replace","src","carrier","alt","origin","destination","date","filtres","stops","titleForTicket","Logo","console","log","logo","Stopfiltres","stopsFiltres","type","name","id","defaultChecked","status","hidden","htmlFor","onClick","titleForFilter","Tabs","App","useState","setApiState","requestApiError","setRequestApiError","setTabsSort","setFiltres","useEffect","fetch","then","responsive","json","searchId","data","tickets","catch","err","changeTabsSort","useCallback","e","target","classList","contains","getAttribute","onClickStops","chosenOption","stopOptions","filter","every","segment","filterByStops","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2380990f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c5fcf845.png\";","// ссылки на API\n\ninterface Api {\n  readonly API_SEARCH_AVIASALES: string;\n  readonly API_SEARCH_TICKETS: string;\n}\n\nexport const aviasalesApi: Api = {\n  API_SEARCH_AVIASALES: \"https://front-test.beta.aviasales.ru/search\",\n  API_SEARCH_TICKETS: \"https://front-test.beta.aviasales.ru/tickets?searchId=\"\n};\n","import React, { ReactElement } from \"react\";\nimport \"./loader.scss\";\n\nconst Loader: React.FC = (): ReactElement => {\n  return (\n    <div className=\"loader\">\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default Loader;\n","export const getFormattedPrice = (value: number) => {\n  // Формат ценны\n  return value.toString().replace(/(\\d)(?=(\\d\\d\\d)+([^\\d]|$))/g, \"$1 \");\n};\nexport const getFormattedDate = (departureDate: Date, duration: number) => {\n  // Функция вывода время вылета и прилета\n  let temp = new Date(departureDate);\n  let arrivedDate = new Date(temp.getTime() + duration * 60000);\n  return `${temp.getHours() > 9 ? temp.getHours() : \"0\" + temp.getHours()}:${\n    temp.getMinutes() > 9 ? temp.getMinutes() : \"0\" + temp.getMinutes()\n  } - \n      ${\n        arrivedDate.getHours() > 9\n          ? arrivedDate.getHours()\n          : \"0\" + arrivedDate.getHours()\n      }:${\n    arrivedDate.getMinutes() > 9\n      ? arrivedDate.getMinutes()\n      : \"0\" + arrivedDate.getMinutes()\n  }`;\n};\nexport const getTimeOfFlight = (value: number) => {\n  // Функция выводит форматированное время полета\n  let hour: number = Math.trunc(value / 60);\n  let minute: number = value - hour * 60;\n  return `${hour} ч ${minute} м`;\n};\n","import React, { ReactElement } from \"react\";\nimport { ITicketPropsItem, Ifilters } from \"../../App\";\nimport Loader from \"../loader/loader\";\nimport \"./ticket.scss\";\nimport {\n  getFormattedPrice,\n  getFormattedDate,\n  getTimeOfFlight\n} from \"../../service/utility\";\n\nexport interface ITicketProps {\n  apiState: ITicketPropsItem[] | undefined;\n  tabsSort: string | null;\n  filtres: Ifilters;\n}\n\nexport const Ticket: React.FC<ITicketProps> = (props): ReactElement => {\n  const sortTicketsByTabs = (\n    incomingArray: ITicketPropsItem[],\n    typeOfSort: string | null\n  ): ITicketPropsItem[] => {\n    /*\n        функция сортировки по цене или быстроте\n        По логике: в зависимости от типа сотрировки, соответсвующий элемент выноситься\n        в отдельный массив, который сортируется стандартным методом JS sort() на увеличение,\n        затем массив с билетам сопостовляется с полученный отсортированным массивом, высставляя элементы(билеты) соответсвенно \n        Вариант, возможно не самый оптимальный, слоность O не считал, просто захотелось попробовать.\n    \n        */\n    let tempArray = [];\n    let resultArray = new Array(incomingArray.length);\n\n    switch (typeOfSort) {\n      case \"price\":\n        // TODO: Заменить циклы FOR на методы\n        for (let i = 0; i < incomingArray.length; i++) {\n          tempArray.push(incomingArray[i].price);\n        }\n        tempArray.sort((a, b) => a - b);\n\n        for (let i = 0; i < incomingArray.length; i++) {\n          resultArray[tempArray.indexOf(incomingArray[i].price)] =\n            incomingArray[i];\n        }\n        return resultArray;\n      case \"fast\":\n        for (let i = 0; i < incomingArray.length; i++) {\n          tempArray.push(\n            incomingArray[i].segments[0].duration +\n              incomingArray[i].segments[1].duration\n          );\n        }\n        tempArray.sort((a, b) => a - b);\n        for (let i = 0; i < incomingArray.length; i++) {\n          resultArray[\n            tempArray.indexOf(\n              incomingArray[i].segments[0].duration +\n                incomingArray[i].segments[1].duration\n            )\n          ] = incomingArray[i];\n        }\n        return resultArray;\n      default:\n        return incomingArray;\n    }\n  };\n  /*\n  const getFormattedPrice = (value: number) => {\n    // Формат ценны\n    return (\n      <span>\n        {value.toString().replace(/(\\d)(?=(\\d\\d\\d)+([^\\d]|$))/g, \"$1 \")} P\n      </span>\n    );\n  };\n  \n  const getFormattedDate = (departureDate: Date, duration: number) => {\n    // Функция вывода время вылета и прилета\n    let temp = new Date(departureDate);\n    let arrivedDate = new Date(temp.getTime() + duration * 60000);\n    return (\n      <span>\n        {temp.getHours() > 9 ? temp.getHours() : \"0\" + temp.getHours()}:\n        {temp.getMinutes() > 9 ? temp.getMinutes() : \"0\" + temp.getMinutes()} -{\" \"}\n        {arrivedDate.getHours() > 9\n          ? arrivedDate.getHours()\n          : \"0\" + arrivedDate.getHours()}\n        :\n        {arrivedDate.getMinutes() > 9\n          ? arrivedDate.getMinutes()\n          : \"0\" + arrivedDate.getMinutes()}\n      </span>\n    );\n  };\n\n  const getTimeOfFlight = (value: number) => {\n    // Функция выводит форматированное время полета\n    let hour: number = Math.trunc(value / 60);\n    let minute: number = value - hour * 60;\n    return (\n      <span>\n        {hour} ч {minute} м\n      </span>\n    );\n  };\n*/\n  return (\n    <div>\n      {props.apiState === undefined ? (\n        <Loader />\n      ) : props.apiState.length !== 0 ? (\n        sortTicketsByTabs(props.apiState, props.tabsSort)\n          .slice(0, 5)\n          .map((item: ITicketPropsItem, index: number) => {\n            return (\n              <div key={index} className=\"ticket\">\n                <div className=\"ticket__header\">\n                  <h3 className=\"ticket__price\">\n                    {getFormattedPrice(item.price)} P\n                  </h3>\n                  <div className=\"ticket__logo\">\n                    <img\n                      src={`//pics.avs.io/99/36/${item.carrier}.png`}\n                      alt=\"air logo\"\n                    />\n                  </div>\n                </div>\n                <div className=\"ticket__way\">\n                  <div className=\"ticket__route\">\n                    <h4 className=\"ticket__title\">\n                      {item.segments[0].origin} - {item.segments[0].destination}\n                    </h4>\n                    <p className=\"ticket__descr\">\n                      {getFormattedDate(\n                        item.segments[0].date,\n                        item.segments[0].duration\n                      )}\n                    </p>\n                  </div>\n                  <div className=\"ticket__lenght\">\n                    <h4 className=\"ticket__title\">В пути</h4>\n                    <p className=\"ticket__descr\">\n                      {getTimeOfFlight(item.segments[0].duration)}\n                    </p>\n                  </div>\n                  <div className=\"ticket__stops\">\n                    <h4 className=\"ticket__title\">\n                      {\n                        props.filtres[item.segments[0].stops.length + 1]\n                          .titleForTicket\n                      }\n                    </h4>\n                    <p className=\"ticket__descr\">\n                      {item.segments[0].stops.length !== 0\n                        ? item.segments[0].stops.toString()\n                        : \"Прямой\"}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"ticket__way\">\n                  <div className=\"ticket__route\">\n                    <h4 className=\"ticket__title\">\n                      {item.segments[1].destination} - {item.segments[1].origin}\n                    </h4>\n                    <p className=\"ticket__descr\">\n                      {getFormattedDate(\n                        item.segments[1].date,\n                        item.segments[1].duration\n                      )}\n                    </p>\n                  </div>\n                  <div className=\"ticket__lenght\">\n                    <h4 className=\"ticket__title\">В пути</h4>\n                    <p className=\"ticket__descr\">\n                      {getTimeOfFlight(item.segments[1].duration)}\n                    </p>\n                  </div>\n                  <div className=\"ticket__stops\">\n                    <h4 className=\"ticket__title\">\n                      {\n                        props.filtres[item.segments[1].stops.length + 1]\n                          .titleForTicket\n                      }\n                    </h4>\n                    <p className=\"ticket__descr\">\n                      {item.segments[1].stops.length !== 0\n                        ? item.segments[1].stops.toString()\n                        : \"Прямой\"}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            );\n          })\n      ) : (\n        <div className=\"no-tickets\">Билетов нет</div>\n      )}\n    </div>\n  );\n};\n","import React, { ReactElement } from \"react\";\nimport logo from \"./logo.png\";\n\nconst Logo: React.FC = (): ReactElement => {\n  console.log(\"logo\");\n  return (\n    <div className=\"logo\">\n      <img src={logo} alt=\"Aviasales logo\" />\n    </div>\n  );\n};\n\nexport default Logo;\n","import React, { ReactElement } from \"react\";\nimport { Ifilters, IfiltersItem } from \"../../App\";\nimport \"./filters.scss\";\n\ninterface IProps {\n  stopsFiltres: Ifilters;\n  onClick: (e: React.MouseEvent) => void;\n}\n\nconst Stopfiltres: React.FC<IProps> = (props): ReactElement => {\n  return (\n    <div className=\"filters\">\n      <h3 className=\"filters__title\">Количество пересадок</h3>\n      {props.stopsFiltres.map((item: IfiltersItem, index: number) => (\n        <div key={index} className=\"filters__item\">\n          <input\n            type=\"checkbox\"\n            name={item.id}\n            id={item.id}\n            defaultChecked={item.status}\n            hidden\n          />\n          <label htmlFor={item.id} type={item.id} onClick={props.onClick}>\n            {item.titleForFilter}\n          </label>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Stopfiltres;\n","import React, { ReactElement } from \"react\";\nimport \"./tabs.scss\";\n\ndeclare module \"react\" {\n  interface HTMLAttributes<T> {\n    type?: string;\n    //element?: string;\n    //modifiers?: string;\n  }\n}\n\ninterface ITabsProps extends React.HTMLAttributes<HTMLElement> {\n  onClick: (e: React.MouseEvent) => void;\n  tabsSort: string | null;\n}\n\nconst Tabs: React.FC<ITabsProps> = (props): ReactElement => {\n  return (\n    <div className=\"tabs\">\n      <div\n        className={\n          props.tabsSort === \"price\" ? \"tabs__item active\" : \"tabs__item\"\n        }\n        onClick={props.onClick}\n        type=\"price\"\n      >\n        Самый дешевый\n      </div>\n      <div\n        className={\n          props.tabsSort === \"fast\" ? \"tabs__item active\" : \"tabs__item\"\n        }\n        onClick={props.onClick}\n        type=\"fast\"\n      >\n        Самый быстрый\n      </div>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { aviasalesApi } from \"./api/api\";\nimport { Ticket } from \"./components/ticket/ticket\";\nimport Logo from \"./components/logo/logo\";\nimport Stopfiltres from \"./components/stopfiltres/stopfiltres\";\nimport Tabs from \"./components/tabs/tabs\";\nimport \"./App.scss\";\nimport \"./style.scss\";\n\n// Interface\n\nexport interface IfiltersItem {\n  id: string;\n  status: boolean;\n  titleForFilter: string;\n  titleForTicket: string;\n}\n\nexport interface Ifilters extends Array<IfiltersItem> {\n  [index: number]: IfiltersItem;\n}\n\nexport interface ITicketPropsItem {\n  price: number;\n  carrier: string;\n  segments: {\n    date: Date;\n    destination: string;\n    duration: number;\n    origin: string;\n    stops: [string?, string?, string?];\n  }[];\n}\n// End Interface\n\nconst App: React.FC = () => {\n  // стейт для хранения массива обьектов(билетов)\n  const [apiState, setApiState] = useState<ITicketPropsItem[] | undefined>(\n    undefined\n  );\n  const [requestApiError, setRequestApiError] = useState<boolean>(false);\n  const [tabsSort, setTabsSort] = useState<string | null>(\"price\");\n  const [filtres, setFiltres] = useState<Ifilters>([\n    {\n      id: `all`,\n      status: true,\n      titleForFilter: `Все`,\n      titleForTicket: `Пересадки`\n    },\n    {\n      id: `noStops`,\n      status: true,\n      titleForFilter: `Без пересадок`,\n      titleForTicket: `Пересадки`\n    },\n    {\n      id: `oneStops`,\n      status: true,\n      titleForFilter: `1 пересадка`,\n      titleForTicket: `1 пересадка`\n    },\n    {\n      id: `twoStops`,\n      status: true,\n      titleForFilter: `2 Пересадки`,\n      titleForTicket: `2 Пересадки`\n    },\n    {\n      id: `threeStops`,\n      status: true,\n      titleForFilter: `3 пересадки`,\n      titleForTicket: `3 пересадки`\n    }\n    // { id: `all`, status: true, title: `Пересадки` }\n  ]);\n\n  useEffect((): void => {\n    // Получаем массив обьектов(билетов)\n    fetch(aviasalesApi.API_SEARCH_AVIASALES) // Вынести в отдельную функцию\n      .then(responsive => responsive.json())\n      .then(\n        responsive =>\n          fetch(aviasalesApi.API_SEARCH_TICKETS + `${responsive.searchId}`)\n            .then(\n              data =>\n                data.status === 200 ? data.json() : setRequestApiError(true) //\n            )\n            .then(data => setApiState(data.tickets))\n            .catch(err => console.log(err)) // нужен ли здесь обработчик ошибок?\n      );\n  }, [requestApiError]); // при изменени стейта, делаем повторный запрос\n\n  const changeTabsSort = useCallback((e: React.MouseEvent): void => {\n    const target = e.target as HTMLElement;\n    console.log(\"tabs\");\n    if (!target.classList.contains(\"active\")) {\n      setTabsSort(target.getAttribute(\"type\"));\n    }\n  }, []);\n\n  const onClickStops = useCallback(\n    (e: React.MouseEvent): void => {\n      // обработчик нажатия на фильтры выбора количества остановок\n      const target = e.target as HTMLElement;\n      const chosenOption = target.getAttribute(\"type\");\n      console.log(\"stops\");\n      setFiltres(\n        filtres.map(item =>\n          item.id === chosenOption ? { ...item, status: !item.status } : item\n        )\n      );\n    },\n    [filtres]\n  );\n\n  const filterByStops = (\n    incomingArray: ITicketPropsItem[] | undefined,\n    filtres: Ifilters\n  ): ITicketPropsItem[] | undefined => {\n    if (incomingArray === undefined) return undefined;\n    if (filtres[0].id === `all` && filtres[0].status) return incomingArray;\n\n    const stopOptions: boolean[] = filtres.slice(1, 5).map(item => item.status);\n\n    return incomingArray.filter(item =>\n      item.segments.every(segment => stopOptions[segment.stops.length])\n    );\n  };\n\n  return (\n    <div className=\"main\">\n      <Logo />\n      <div className=\"main__inner\">\n        <Stopfiltres onClick={onClickStops} stopsFiltres={filtres} />\n        <div className=\"result\">\n          <Tabs onClick={changeTabsSort} tabsSort={tabsSort} />\n          <Ticket\n            tabsSort={tabsSort}\n            filtres={filtres}\n            apiState={filterByStops(apiState, filtres)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}